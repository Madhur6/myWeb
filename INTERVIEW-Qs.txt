# Madhur's Cheat Sheet for Spring-Boot interview preparation üòâüí°



- ----------------------------------------------‚ú® INDEX ‚ú®---------------------------------------------------

üí° CHAPTER I   : BASIC SPRING-BOOT

üí° CHAPTER II  : MORE SPRING-BOOT


- ----------------------------------------------‚ú® INDEX ‚ú®---------------------------------------------------
					<< LET'S START LEARNING üòä >>



- ------------------------------------------< BASIC SPRING-BOOT > ------------------------------------

- ----------------------------------------------‚ú® SET-I ‚ú®-------------------------------------------


Q. Hermionne's team is building a REST API that should return JSON responses. 
   What annotation should he use to ensure proper serialization of response data?
 A) @Service
 B) @Controller
 C) @RequestParam
 D) @RestController



Q. Harry wants to create a REST endpoint that accepts JSON input and maps it 
   to a Java object automatically. Which annotation should he use?
 A) @RequestBody
 B) @PathVariable
 C) @RequestParam
 D) @ResponseBody



Q. padma is debugging a Spring Boot application and wants to enable detailed SQL 
   logs. What should she add to application.properties?
 A) spring.debug.sql=true
 B) spring.logging.level=DEBUG
 C) spring.jpa.show-sql=true
 D) spring.datasource.log-statements=true



Q. Draco's Spring Boot application should automatically restart when file 
   changes are detected in the development environment. How can he achieve 
   this?
 A) Use spring-boot-devtools
 B) Manually restart the server every time
 C) Enable spring.reload.enabled=true in application.properties
 D) Use a shell script to watch for file changes



Q. Ron wants to define an API that handles both GET and POST requests for 
   the same URL in her Spring Boot application. What should she do?
 A) Use @RequestMapping(value = "/api", method = {RequestMethod.GET, 
RequestMethod.POST})
 B) Create separate methods with @GetMapping("/api") and @PostMapping("/api")
 C) Use @RequestParam to di erentiate between GET and POST requests
 D) Override the doGet() and doPost() methods manually



Q.  What is the issue with this Spring Boot entity class?
 @Entity  
public class Product {  
private Long id;  
private String name;  
// Getters and setters  
}  
 A. Missing @Id on the id field
 B. Missing @Column on name
 C. Missing @Entity annotation
 D. No issues



Q. What is the issue with this REST controller?
   @RestController  
   public class UserController {  
        private UserService userService;  
        public UserController(UserService userService) {  
                this.userService = userService;  
        }  
   }  
 A. Missing @Autowired on the constructor
 B. Missing @GetMapping
 C. UserService is not a bean
 D. No issues




Q. What is wrong with this REST endpoint?
    @RestController
    public class ProductController {
        @PostMapping("/products")
          public void addProduct(Product product) { }
    }
 A. Missing @RequestBody
 B. Missing @Autowired
 C. Missing @Entity on Product
 D. Nothing is wrong



Q.  What is wrong with this @Entity setup?
 @Entity
 public class User {
 private String name;
 }
 A. Missing @Id field
 B. @Table is required
 C. @Column is required
 D. Nothing is wrong



Q. What annotation marks a Spring Boot application‚Äôs main class?
 A. @SpringBootApplication
 B. @SpringApplication
 C. @EnableAutoConfiguration
 D. @Main


Q.  Which annotation injects dependencies by constructor?
 A. @Inject
 B. @Autowired
 C. @Resource
 D. @Component



Q. Which HTTP method performs a CRUD update?
 A. POST
 B. PUT
 C. GET
 D. DELETE



Q. What is the default port for Spring Boot?
 A. 8080
 B. 8000
 C. 8443
 D. 9090



Q. Which annotation maps POST requests?
 A. @PostMapping
 B. @RequestMapping(method = POST)
 C. Both A and B
 D. @PUT



Q. What is the purpose of @RequestParam?
 A. Binds HTTP request parameters to method arguments
 B. Validates request bodies
 C. Maps path variables
 D. Reads HTTP headers



Q. What does @SpringBootApplication combine?
 A. @Configuration, @EnableAutoConfiguration, @ComponentScan
 B. @Controller, @Service, @Repository
 C. @Spring, @Boot, @App
 D. @Bean, @Inject, @Autowired



Q. What is the purpose of @RequestBody?
 A. Binds HTTP request body to a method parameter
 B. Validates request headers
 C. Maps URL parameters
 D. Reads query strings



Q. Which HTTP method is idempotent?
 A. GET
 B. POST
 C. PATCH
 D. DELETE


Q. Which annotation maps HTTP DELETE requests?
 A. @DeleteMapping
 B. @RemoveMapping
 C. @RequestMapping(method = DELETE)
 D. Both A and C



Q. Which HTTP status indicates a successful POST request?
 A. 201
 B. 200
 C. 204
 D. 202


Q. Which HTTP method is non-idempotent?
 A. POST
 B. GET
 C. PUT
 D. DELETE



Q. What does @GeneratedValue do in JPA?
 A. Configures automatic ID generation
 B. Validates field values
 C. Maps generated columns
 D. Skips ID checks








- --------------------------------------------‚≠êSET-I ENDS‚≠ê--------------------------------------------






- ------------------------------------------< MORE SPRING-BOOT > ------------------------------------

- ----------------------------------------------‚ú® SET-II ‚ú®-------------------------------------------


Q.  harry wants to test whether his Spring Boot microservices are healthy and 
    running. What should he configure?
 A) Spring Boot Actuator health endpoint
 B) A manual ping test every few minutes
 C) Check logs manually
 D) Use an external script to restart services periodically



Q. Snape is debugging a Spring Boot application and needs to check the active 
   beans. What command can he use in the Spring Boot Actuator?
 A) /actuator/beans
 B) /actuator/health
 C) /actuator/logs
 D) /actuator/info



Q. Raja needs to ensure that a specific method runs automatically when a 
Spring Boot application starts. What annotation should he use?
 A) @PostConstruct
 B) @PreDestroy
 C) @InitMethod
 D) @AutoRun



Q. Hermionne wants to expose a REST endpoint that only accepts JSON input. What 
should she specify in the controller?
 A) @PostMapping(value = "/api", consumes = "application/json")
 B) @PostMapping(value = "/api") without any extra configuration
 C) Check the request type manually inside the controller method
 D) Use @Consumes("application/json")



Q. Ron wants to define a custom scope for a Spring bean. Which annotation 
should he use?
 A) @Scope("prototype")
 B) @Singleton
 C) @Service
 D) @Component



Q. Padma needs to implement a custom authentication mechanism in her Spring 
Boot application. Which interface should she implement?
 A) UserDetailsService
 B) AuthenticationManager
 C) SecurityFilterChain
 D) AuthProvider



Q. Fred is working on a Spring Boot application where he needs to ensure that 
a newly created entity is assigned a unique ID automatically. What should he 
do?
 A) Manually assign a UUID before saving the entity
 B) Use @GeneratedValue(strategy = GenerationType.IDENTITY) on the ID field
 C) Use @Column(unique = true) and check for duplicates
 D) Generate a random number and assign it to the ID



Q. Ron wants to handle exceptions globally in his Spring Boot REST API. 
What should he use?
 A) Manually catch exceptions in every controller method
 B) @ControllerAdvice with @ExceptionHandler
 C) Use try-catch inside the repository layer
 D) Disable exception handling to allow default error messages



Q. Harry wants to ensure that the same API request is not processed multiple 
times if the client sends it repeatedly. What can he implement?
 A) Increase API timeout to avoid duplicate requests
 B) Use @Transactional to prevent duplicates
 C) Idempotency using unique request identifiers
 D) Manually check each request's payload in the controller



Q. George is using Spring Security and wants to restrict access to a particular API 
endpoint to only users with the "ADMIN" role. What should he do?
 A) Disable security and validate requests manually
 B) Manually check the user‚Äôs role in the controller
 C) Store user roles in session attributes
 D) Use @PreAuthorize("hasRole('ADMIN')")



Q. Pansy is developing a REST API where she wants to support both XML and 
JSON responses based on client requests. What should she do?
A) Use @RestController with produces={"application/json", "application/xml"}
 B) Only return JSON as XML is outdated
 C) Manually parse the response format in the controller
 D) Use @ResponseBody without any content type specification



Q. Padma is deploying a Spring Boot microservice and wants to externalize its 
configuration for different environments (dev, test, prod). What should she use?
 A) Spring Profiles (application-{profile}.properties)
 B) Hardcode configuration inside the main application class
 C) Use System.getenv() for all configurations
 D) Manually change configurations before every deployment



Q. Ron is building a REST API that should return HTTP 201 Created after 
successfully creating a resource. What should he do?
 A) Return ResponseEntity.created(location).build() in the controller
 B) Always return HTTP 200 OK for successful requests
 C) Return ResponseEntity.ok() for all responses
 D) Use @ResponseStatus(HttpStatus.CREATED) at the class level



Q. Draco is configuring security in his Spring Boot application and wants to 
allow unauthenticated users to access the login API. What should he do?
 A) Use http.authorizeRequests().antMatchers("/login").permitAll()
 B) Remove Spring Security from the project
 C) Disable authentication for all API endpoints
 D) Manually validate user credentials inside the controller



Q. Simon is using Spring Boot and wants to ensure that a DELETE request only 
deletes a record if it exists. What should he do?
 A) Check existence with findById() before calling deleteById()
 B) Call deleteById() without checking and handle exceptions manually
 C) Use DELETE FROM table WHERE id = ? in a native query
 D) Allow the API to return 200 OK even if the record doesn't exist.



Q. Fred wants to ensure that his Spring Boot REST API properly handles 400 
Bad Request errors when validation fails. What should he configure?
 A) Return a generic error message instead of specific validation errors.
 B) Catch Exception in a try-catch block
 C) Disable validation and allow incorrect data
 D) Use @Valid annotation in the request body parameter



Q. Hagrid wants to ensure that his Spring Boot REST API properly handles 400 
Bad Request errors when validation fails. What should he configure?
 A) Use @Valid annotation in the request body parameter
 B) Catch Exception in a try-catch block
 C) Disable validation and allow incorrect data
 D) Return a generic error message instead of specific validation errors.



Q. Severus is working on a Spring Boot application with multiple database 
connections. He wants to define di erent database configurations based on the 
active environment. What is the best way to achieve this?
 A) Create multiple application.properties files and switch using @Profile
 B) Use @ConfigurationProperties and define all database settings in a single file
 C) Change database configurations manually in application.properties before running
 D) Use System.setProperty("spring.profiles.active", "dev") in the main method



Q. Padma needs to store user passwords securely in her Spring Boot 
authentication system. What is the recommended approach?
 A) Store plaintext passwords in the database
 B) Use BCryptPasswordEncoder to hash passwords before storing
 C) Encrypt passwords using AES and store the key in the application code
 D) Use MD5 hashing since it is fast and secure



Q. Draco wants to create a REST endpoint that accepts JSON input and maps it 
to a Java object automatically. Which annotation should he use?
 A) @RequestBody
 B) @PathVariable
 C) @RequestParam
 D) @ResponseBody



Q. Hagrid is using Spring Data JPA but needs a custom query for fetching users 
with a specific status. How should he define it?
 A) Use @Query("SELECT u FROM User u WHERE u.status = ?1") in the repository
 B) Use findByStatus() method in JpaRepository
 C) Use raw JDBC calls inside the repository
 D) Call entityManager.createQuery("SELECT * FROM users WHERE status=?")



Q. Ron needs to configure a repository in Spring Boot that supports paging 
and sorting. Which interface should he use?
 A) PagingAndSortingRepository
 B) CrudRepository
 C) JpaRepository
 D) DataRepository



Q. Dumbledorüßô‚Äç‚ôÇÔ∏è is using data.sql inside src/main/resources/ path to execute a "Insert" query.
   But he is getting this following error: ```Table "UR_TABLE" not found (this database is empty);```
   Now what he needs to add inside `application.properties`?
 A) spring.mvc.view.prefix=/src/main/resources/data.sql
 B) spring.jpa.defer-datasource-initialization=true
 C) spring.datasource.url=jdbc:h2:file:./data/testdb
 D) None of the above



Q. Hermionne's Spring Boot microservice needs to handle multiple configurations 
for di erent environments (Dev, Test, Prod). What is the best approach?
 A) Use application-dev.yml, application-test.yml, application-prod.yml and activate using 
profiles
 B) Store all configurations in a single application.properties file
 C) Use an external database for storing environment-specific configurations
 D) Modify configurations manually before deploying




Q. Pancy is debugging her Spring Boot application and wants to enable 
debugging logs only for database operations. What should she configure?
 A) logging.level.org.springframework.jdbc=DEBUG
 B) spring.jpa.show-sql=true
 C) debug=true
 D) spring.datasource.debug=true



Q. Harry wants to secure certain endpoints in his Spring Boot REST API and 
allow only authenticated users to access them. What should he configure?
 A) Use http.authorizeRequests().anyRequest().authenticated() in SecurityConfig
 B) Set spring.security.enable=true in application.properties
 C) Create a custom security filter and add if (user != null) checks manually
 D) Implement authentication logic inside the controller



Q. Ginny is developing a Spring Boot application where she needs to use 
di erent sets of beans for di erent environments. What is the best approach?
A) Use @Profile("dev") and @Profile("prod") annotations on beans
 B) Manually switch beans in application.properties
 C) Use @Autowired to inject environment-specific beans at runtime
 D) Define all beans in one configuration class and enable/disable manually



Q. George wants to ensure that passwords are encrypted in his Spring Boot 
application before saving them to the database. What should he use?
 A) BCryptPasswordEncoder
 B) MD5 hashing
 C) AES encryption
 D) Base64 encoding



Q. Moody wants to use constructor-based dependency injection instead of 
field injection in his Spring Boot application. What should he do?
 A) Use @Autowired on the constructor instead of fields
 B) Use @Inject on private fields
 C) Call new Service() inside the component
 D) Use @Bean annotation on fields



Q. Fred is using Spring Boot and wants to ensure that a DELETE request only 
deletes a record if it exists. What should he do?
 A) Use DELETE FROM table WHERE id = ? in a native query
 B) Call deleteById() without checking and handle exceptions manually
 C) Check existence with findById() before calling deleteById()
 D) Allow the API to return 200 OK even if the record doesn't exist.




Q. Tom-Riddle is configuring security in his Spring Boot application and wants to 
allow unauthenticated users to access the login API. What should he do?
A) Use http.authorizeRequests().antMatchers("/login").permitAll()
 B) Remove Spring Security from the project
 C) Disable authentication for all API endpoints
 D) Manually validate user credentials inside the controller



Q. Harry is deploying a Spring Boot microservice and wants to externalize its 
configuration for di erent environments (dev, test, prod). What should she use?
 A) Manually change configurations before every deployment
 B) Hardcode configuration inside the main application class
 C) Use System.getenv() for all configurations
 D) Spring Profiles (application-{profile}.properties)



Q. 



- --------------------------------------------‚≠êSET-II ENDS‚≠ê--------------------------------------------



