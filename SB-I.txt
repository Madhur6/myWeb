# MADHUR'S CHEAT SHEET FOR SPRING-BOOT ‚≠êüòâüíªüìö

- ----------------------------------------------‚ú® INDEX ‚ú®---------------------------------------------------

üí° CHAPTER I   : INTRODUCTION TO SPRING / S-MVC / S-BOOT

üí° CHAPTER II  : SETTING UP SPRING-BOOT

üí° CHAPTER III : LOGGING

üí° CHAPTER IV  : MORE SPRING-BOOT (BEANS / CONTROLLER vs REST-CONTROLLERS / REQUEST-MAPPING / AUTOWIRED etc...)

üí° CHAPTER V   : START DEVELOPING

üí° CHAPTER VI  : MONITOR S-B

üí° CHAPTER VII : LET'S LOGIN

üí° CHAPTER VIII: JS-TAG-LIBRARIES & BootStrap

üí° CHAPTER IX  : Validation & 2-WAY BINDING üòÆ

üí° CHAPTER X   : LET'S BUILD TO-DO  

üí° CHAPTER XI  : LET'S CONNECT & MORE

üí° CHAPTER XII : LET'S AUTHENTICATEüíª

- ----------------------------------------------‚ú® INDEX ‚ú®---------------------------------------------------
					<< LET'S START LEARNING üòä >>





- --------------------------------INTRODUCTION TO SPRING / S-MVC / S-BOOT--------------------------------

- ----------------------------------------------‚ú®CHAPTER-I‚ú®--------------------------------------------

Understanding Spring Boot vs Spring MVC vs Spring

*-------------------------------*-------------------------------*
- Spring Boot vs Spring MVC vs Spring: What's in it?

  - Spring Framework: 
	Dependency Injection

    - @Component, @Autowired, @Component Scan etc..
    - Just dependency injection is not sufficient (You need other frameworks to build apps)
      - Spring modules & spring projects: 
	- Extend spring eco system
        - Provide good integration with other frameworks (Hibernate/JPA, JUnit & Mockito for unit testing)


*-------------------------------*-------------------------------*
- Spring MVC (Spring Module): 
	Simplify building web apps and REST API

    - Building web application with Struts was very complex
    - @Controller, @RestController, @RequestMapping("/courses")


*-------------------------------*-------------------------------*
  - Spring Boot (Spring Project): 
	Build Production-Ready apps Quickly

    - Starter Projects - Make it easy to build variety of applications
    - Auto configuration - Eliminate configuration to setup Spring, Spring MVC and other frameworks!
    - Enable non functional requirements (NFRs):
      - Actuator: Enables Advanced Monitoring of applications
      - Embedded server: No need for separate application servers!
      - Logging and Error handling.
      - Profiles and ConfigurationProperties

*-------------------------------*-------------------------------*

// Dependency Management (pom.xml)

// Define web app configuration (web.xml)

// Manage Spring Beans (content.xml)

// Implement non functional requirements (NFRs)





- --------------------------------------------‚≠êCHAPTER-I ENDS‚≠ê----------------------------------------------









- ------------------------------------------SETTING UP SPRING-BOOT-------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-II‚ú®------------------------------------------------

model: todo
controller: todoController
service: todoService

*-------------------------------*-------------------------------*

// Setting up spring boot project: 

   start.spring.io (spring initializer) 
   - Project:    Maven project 
   - Language:   Java language
   - SpringBoot: 3.0.0 ( DO NOT USE "SNAPSHOT" VERSIONS )
   - Project MetaData > Group / Artifact / Name / Description / Package Name / < Packaging: Jar > / Java: 17 (atleast)
   
   -  Dependencies: 
      - Spring Web
      - anything else you require....
      
   - Generate: will generate a zip file... Happy Coding üòä
   

// Importing the project:
   - in eclipse: file > import > existing maven projects ‚ú®
   

// After importing the project:
   - src/main/java:      This is where our java code will go
   - src/main/resources: This is where our application's configuration will go
   - src/test/java:      This is where our unit tests will go
   - pom.xml:            All the dependencies 




- --------------------------------------------‚≠êCHAPTER-II ENDS‚≠ê---------------------------------------------








- ----------------------------------------------< LOGGING >--------------------------------------------------

- --------------------------------------------‚ú®CHAPTER-III‚ú®------------------------------------------------


Application.properties: [src/main/resources]

- logging.level.org.springframework=debug > "for package `org.springframework`, We want to log at `debug` level."
                                            - Basically we will see much more logged information when we will run the spring-boot application
 
- logging.level.org.springframework=trace > printing at even lower level

- logging.level.org.springframework=info  > printing at higher level ( not much information * )

- ORDER üí´:
  trace > debug > info > warning > error > off ...
            * 
	    |
	    |
         [debug / info / warning / error] is printed :)

*-------------------------------*-------------------------------*

CONDITIONS EVALUATION REPORT:

- Positive matches: Things that were auto-configured.

- Negative matches: Things that did not got auto-configured.




- --------------------------------------------‚≠êCHAPTER-III ENDS‚≠ê---------------------------------------------








- ------------------------------------------< MORE SPRING-BOOT >---------------------------------------------

- --------------------------------------------‚ú®CHAPTER-IV‚ú®-------------------------------------------------



*-------------------------------*-------------------------------*

// Beans
   - The objects that form the backbone of your application and that are managed by 
     the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, 
     and otherwise managed by a Spring IoC (Inversion of control) container.



*-------------------------------*-------------------------------*
@Controller                                                         @RestController

This annotation is used to mark classes                             This is a specialized controller used for RESTful web services.
as Spring MVC controllers. 

Extends @Component annotation.                                      Extends @Controller annotation.

Returns a view in Spring Web MVC.                                   Cannot return a view.

Requires @ResponseBody for sending responses as JSON or XML.        Assumes @ResponseBody by default for sending responses as JSON or XML, eliminating the need for explicit annotations.

Used for traditional MVC applications                               Used for REST APIs where JSON or XML responses are sent directly to the client.
where views (JSP, Thymeleaf) are returned.

Introduced in Spring 2.5.                                           Introduced in Spring 4.0.



#JSON conversion: Done via framework called "jacksonHttpMessageConvertersConfiguration" [bean ---> json]

                 - If you return the arrayList or etc, It'll convert it into "json".



- To change the server: server.port = 8081

- To return a view, You need @ResponseBody annotation...

- To return a HTML, create a JSP file inside this path: `/src/main/resources/META-INF/resources/WEB-INF/jsp/sayHello.jsp`





*-------------------------------*-------------------------------*
- @Autowired:
  - Also considers self references for injection (that is, references back to the bean that is currently injected).
  
  


*-------------------------------*-------------------------------*
@RequestMapping

- To map requests to controllers methods

- There are also HTTP method specific shortcut variants of @RequestMapping:

  - @GetMapping

  - @PostMapping

  - @PutMapping

  - @DeleteMapping

  - @PatchMapping









- --------------------------------------------‚≠êCHAPTER-IV ENDS‚≠ê---------------------------------------------



- -------------------------------------------< START DEVELOPING >--------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-V‚ú®-------------------------------------------------



*-------------------------------*-------------------------------*
- Tired of re-starting your server all the time
  - Add spring-boot-devtools <But after making modification in pom.xml, Need to restart >



*-------------------------------*-------------------------------*
- Keeping things simple üëç
  Ex. 
  - Let's say we have 2 environments: 1). developement
                                      2). production
  
  - Creating profiles: 
    - Copy & paste application.properties > Save as application-dev.props / application-prod.props 
  
  - Making use of profiles:
    - application.properties > spring.profiles.active=prod / dev ( Whatever configuration is in app-prod.props, Has higher priority )
    
  

- Talking to different service:
  - We would need currency-service.url / currency-service.key / currency-service.username
  - Create a class "currencyServiceConfiguration" & add following annotations: @ConfigurationProperties(prefix = "currency-service") / 
  - @Component: I want spring-boot to handle this [Basically spring-boot will create an instance of the class]
  


*-------------------------------*-------------------------------*
- Embedded server:
  - Already part of our .jar file
  - steps: - install java
           - run jar file
  
  - maven build > clean install > copy building jar path: <>
  
  - cd to path in cmd & location SNAPSHOT.jar
  - java -jar < full-name of SNAPSHOT.jar >


- Add this dependency inside the pom.xml: 

  - ```
    <dependency>
		<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		<scope>provided</scope>
    </dependency>
    ```



*-------------------------------*-------------------------------*
- Modify your application.properties:
  - spring.mvc.view.prefix=/WEB-INF/jsp/
    spring.mvc.view.suffix=.jsp
    
  - logging.level.org.springframework=debug


[[
	# What is a static block?
	- A static block in Java is a special block of code that runs only once when the class is loaded into memory. 
  	  It is used to initialize static variables or perform one-time setup tasks.
]] 







*-------------------------------*-------------------------------*
// How to display views

- Create a .jsp file inside this path: [/src/main/resources/META-INF/resources/WEB-INF/jsp/sayHello.jsp]
- Inside your controller: return "jsp-file-name"


// Can add request header as parameter

- @RequestMapping(value="login", method=RequestMethod.GET)
  
- We use @RequestParam when we want to capture "QueryParameters" like /login?name=harry



*-------------------------------*-------------------------------*
// ModelMap

- (There is a Model / ModelMap / ModelAndView)

- The advantage of ModelMap is it gives us the ability to pass a collection of values and treat these values as if they were within a Map.
- To Pass query-params to our .jsp file, Use ModelMap
  - @RequestMapping(value="login", method=RequestMethod.GET, ModelMap model)
  - model.put("name", name) 
	
	






- --------------------------------------------‚≠êCHAPTER-V ENDS‚≠ê----------------------------------------------






- ---------------------------------------------< MONITOR S-B >-----------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-VI‚ú®------------------------------------------------


Monitor Applications using Spring Boot Actuator
  
- Monitor & manage your application in your production
  
- Provides a number of endpoints:
  - beans:   Complete list of spring beans in your app.
  - health:  Application health information.
  - metrics: Application metrics.
  - mappings:Details around Request mappings.
   
- spring-boot-starter-actuator <localhost:8080/actuator/*health*>

- To access more information, application.properties: <management.endpoints.web.exposure.include=* or (health,metrics)>






- --------------------------------------------‚≠êCHAPTER-VI ENDS‚≠ê----------------------------------------------





- ---------------------------------------------< LET'S LOGIN >-----------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-VII‚ú®-----------------------------------------------



/*
 ============================================================================
 üß† Login Controller Cheat Sheet - Summary

```HTML‚ú®
<html>
	<head>
		<title> Login </title>
	</head>
	<body>
		<h1> Welcome to my login page </h1>
		<form method="post">
			Name: <input type="text" name="name">
			Password: <input type="password" name="password">
			<input type="submit">
		</form>
	</body>	
</html>
```
 ============================================================================
 Package:
     com.prac.myPrac.controller

 Purpose:
     - Handles login functionality
     - Uses GET to display login page
     - Uses POST to process login form
     - Uses AuthenticationService for validation
     - Stores username in session using @SessionAttributes

 ----------------------------------------------------------------------------
 üîß Annotations:
 ----------------------------------------------------------------------------
 @Controller                 --> Marks class as Spring MVC Controller
 @SessionAttributes("name")  --> Stores 'name' in session scope
 @Autowired                  --> Injects AuthenticationService bean
 @RequestMapping             --> Maps HTTP requests to methods

 ----------------------------------------------------------------------------
 ‚úÖ GET Request (Display login page):
 ----------------------------------------------------------------------------
 @RequestMapping(value="login2", method=RequestMethod.GET)
 public String goToLoginPage() {
     return "login";  // Returns login.jsp/html
 }

 ----------------------------------------------------------------------------
 ‚úÖ POST Request (Process form):
 ----------------------------------------------------------------------------
 @RequestMapping(value="login2", method=RequestMethod.POST)
 public String goToWelcomePage(@RequestParam String name,
                               @RequestParam String password,
                               ModelMap model) {
     if (authenticationService.authenticate(name, password)) {
         model.put("name", name);          // Save name to session
         model.put("password", password);  // For demo purposes only (not secure)
         return "welcome";                 // Returns welcome.jsp/html
     }
     return "login";  // Return to login if authentication fails
 }

 ----------------------------------------------------------------------------
 üîê AuthenticationService:
 ----------------------------------------------------------------------------
 @Autowired
 private AuthenticationService authenticationService;

 // Constructor-based injection
 public loginController(AuthenticationService authenticationService) {
 	 super();
     this.authenticationService = authenticationService;
 }
 
 
 
 ```AuthenticationService
 
 	public boolean authenticate(String name, String password) {
		boolean isValidName = name.equalsIgnoreCase(name);
		boolean isValidPassword = password.equalsIgnoreCase(password);
		
		return isValidName && isValidPassword;
	}
 
 ```

 ----------------------------------------------------------------------------
 üßæ View Mapping:
 ----------------------------------------------------------------------------
 login.jsp      --> shown on GET or failed login
 welcome.jsp    --> shown on successful login

 ----------------------------------------------------------------------------
 # Notes:
 ----------------------------------------------------------------------------
 - Do NOT log or store passwords in production apps
 - Use hashing to secure user passwords
 - Logging user credentials is unsafe!
*/





- --------------------------------------------‚≠êCHAPTER-VII ENDS‚≠ê---------------------------------------------







- ------------------------------------------< JS TAG LIBRARIES & BootStrap >---------------------------------------------

- --------------------------------------------‚ú®CHAPTER-VIII‚ú®-----------------------------------------------


- Adding JSTL to jsp pages

```
<dependency>
	<groupId>jakarta.servlet.jsp.jstl</groupId>
	<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
</dependency>

<dependency>
    <groupId>org.glassfish.web</groupId>
    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
</dependency>
```


*----------------------------*----------------------------*
1. Directive Tags
	These tags provide global information about the JSP page to the container (like page settings, imports, etc.)

	Syntax: <%@ directive attribute="value" %>
	
2. Scriptlet Tags
	Used to embed Java code directly into the JSP file.

	Syntax: <% Java code %>
	
3. Expression Tags
	Used to output the result of a Java expression to the client.

	Syntax: <%= expression %>
	
4. Declaration Tags
	Used to declare variables and methods that can be used later in the JSP page.

	Syntax: <%! declaration %>
	
	
5. Action Tags
	Predefined XML tags that control the behavior of the JSP engine.

	Examples:
		<jsp:include> ‚Äì Includes a file at runtime
		<jsp:forward> ‚Äì Forwards request to another resource
		<jsp:param> ‚Äì Passes parameters
		<jsp:useBean> ‚Äì Instantiates or accesses a JavaBean
		<jsp:setProperty> / <jsp:getProperty> ‚Äì Sets or gets bean properties
		
		
6. Custom Tags
	These are user-defined tags or tags from tag libraries like JSTL (Java Standard Tag Library).
	
	Example using JSTL:
	```jsp
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
		<c:if test="${user.loggedIn}">
   			Welcome, ${user.name}!
		</c:if>
	```




*----------------------------*----------------------------*
// Adding Bootstrap CSS framework to Spring Boot Project using webjars

```
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap</artifactId>
	<version>5.1.3</version>
</dependency>
 
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>jquery</artifactId>
	<version>3.6.0</version>
</dependency>

<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet" >
<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
<script src="webjars/jquery/3.6.0/jquery.min.js"></script>

```





- --------------------------------------------‚≠êCHAPTER-VIII ENDS‚≠ê--------------------------------------------







- ------------------------------------< Validation & 2-WAY BINDING üòÆ >--------------------------------------

- ---------------------------------------------‚ú®CHAPTER-IX‚ú®------------------------------------------------



*----------------------------*----------------------------*----------------------------*----------------------------*----------------------------*----------------------------

#‚ú® Adding Validation in 2-way binding (.jsp & _controller.java)


#1.
```
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>
```


#2. Adding validations, To bean:
  - @Size(min=10, message="Enter atleast 10 characters")
    private String description;


#3. Adding form:
  - <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
  
  - Also, Add spring form tag library...
    [ <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> ]


#4. Also, 
    - [ <form method="post" modelAttribute="todo"> ] 
    -> This modelAttribute binds the form with this "todo" object in controller...	[ public String addNewToDo(ToDo todo, ModelMap model) ]

```
<form:form method="post" modelAttribute="todo">
	<fieldset class="mb-3">
		<form:label path="description"> description </form:label>
		<form:input type="text" path="description" required="required"/>
		<form:errors path="description" cssClass="text-warning"/>
	</fieldset>
</form:form>
```


#5. Instead of @RequestParams, Bind it to directly to "bean" itself...
  [ add
    ```
	@RequestMapping(value="add-todo", method=RequestMethod.POST)
	public String addToDo(@Valid @ModelAttribute("todo") ToDo todo, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return "addToDo";
		}
		
		todoservice.addToDo(todo.getTaskName(), todo.getDescription(), todo.getDate(), false);
		
		return "redirect:list-todo";
	}
    ```
  ]


#6. Also,
  [ Description: <form:input type="text" path="description" ... ] 
  
  -> binds the input form to "description" variable of "todo" bean...


#7. Also, 
  create form:input for everything, So that nothing is null...
  & add empty todo object inside your get method of "getToDo"
  
  ```
	@RequestMapping(value="add-todo", method=RequestMethod.GET)
	public String getAddToDo(ModelMap model) {
		ToDo todo = new ToDo("", "", LocalDate.now(), false);
		model.put("todo", todo);
		return "addToDo";
	}
  ```


#8. Also, 
   add <form:errors path="description" cssClass="text-warning"/>
   






- --------------------------------------------‚≠êCHAPTER-IX ENDS‚≠ê----------------------------------------------








- ------------------------------------------< LET'S BUILD TO-DO >---------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-X‚ú®-------------------------------------------------


# 1. Create a model ToDO
	Add @Entity / @Id / @GeneratedValue(strategy=GenerationType.AUTO) ...

```
@Entity
public class ToDo {
	@Id
	@GeneratedValue()
	private int id;
	private String username;
	private String taskName;
	
	@Size(min=10, message="Enter atleast 10 characters!")
	private String description;
	private LocalDate date;
	private boolean done;
	...
```


	

# 2. Create a Service ToDo:
	Add @Service annotation...

```
@Service
public class todoService {
	private static List<ToDo> todoList = new ArrayList<>();
	
	private static int counter = 3;
	
	
	static {
		todoList.add(new ToDo(1, "myPrac", "learning sb", LocalDate.now().plusYears(1), false));
		todoList.add(new ToDo(2, "myPrac", "learning angular", LocalDate.now().plusYears(2), false));
		todoList.add(new ToDo(3, "myPrac", "learning git", LocalDate.now().plusYears(3), false));
	}

	
	public List<ToDo> getToDo() {
		System.out.println(todoList);
		return todoList;
	}
	
	public List<ToDo> getToDoByUsername(String username){
		Predicate<? super ToDo> predicate = todo -> todo.getUsername() != null && todo.getUsername().equalsIgnoreCase(username);
		return todoList.stream().filter(predicate).toList();
	}
```



	
# 3. Create a controller ToDo:
	Add @Controller annotation...

```
@Controller
@SessionAttributes("name")
public class todoController {
	
	@Autowired
	private todoService todoservice;
	
	@RequestMapping("list-todo")
	public String getToDo(ModelMap model) {
		List<ToDo> todos = todoservice.getToDo();
		System.out.println(todos);
		model.addAttribute("todos", todos);
		return "ToDoList";
	}	
```




# 4. Create ToDo.jsp:

```
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<html>
	<head>
		<title>To Do List</title>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
	</head>
	<body>
		<div class="container m-3 p-3">
			<table class="table">		
				<thead>
					<th>UserName</th>
					<th>TaskName</th>
					<th>Description</th>
					<th>Date</th>
					<th>Done</th>
				</thead>
				<tbody>
					<c:forEach items="${todos}" var="todo">
						<tr>
							<td>${todo.userName}</td>
							<td>${todo.taskName}</td>
							<td>${todo.description}</td>
							<td>${todo.date}</td>
							<td>${todo.done}</td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
			<a href="add-todo" class="btn">add</a>
		</div>
		<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
		<script src="webjars/jquery/3.6.0/jquery.min.js"></script>
	</body>
</html>
```


# 5. Add addToDo.jsp:

//üí° ModelAttribute: In the "addToDo" method, We have an "ToDo" object bound to our View. 
		     We can map our form fields to an object model as simply as that. 
		    In the method, we‚Äôre fetching values from the form and setting them to ModelMap.
		    In the end, we return "ToDoList" View, which means that we call the respective JSP file as a View representative.//

[[ //üí° Valid: Refer to Chapter IX for more detailed explaination.üí´ ]]

```
	@RequestMapping(value="add-todo", method=RequestMethod.GET)
	public String getAddToDo(ModelMap model) {
		ToDo todo = new ToDo("", "", "", LocalDate.now(), false);
		model.put("todo", todo);
		return "addToDo";
	}
	@RequestMapping(value="add-todo", method=RequestMethod.POST)
	public String addToDo(@Valid @ModelAttribute("todo") ToDo todo, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return "addToDo";
		}
		todoservice.addToDo(todo.getUsername(), todo.getTaskName(), todo.getDescription(), todo.getDate(), false);
		return "redirect:list-todo";
	}	
```
```
	public void addToDo(String username, String taskname, String description, LocalDate date, boolean done) {
		todoList.add(new ToDo(++counter, username, taskname, description, date, done));
	}
	
```
```
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<html>
	<head>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet" >
		<link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet">
		<title>Add To Do </title>
		<style>
		</style>
	</head>
	<body>
		<%@ include file="common/header.jspf" %>
		<%@ include file="common/navigation.jspf" %>
		<div class="p-3">	
			<h4 class="text-center m-3"> Add Your To-Dos ${name} </h4>
			<hr>
			<div class="container m-3 p-3">
				<form:form method="post" modelAttribute="todo">
					
					<fieldset class="mb-3">
						<form:label path="taskName"> Task Name </form:label>
						<form:input type="text" path="taskName" required="required"/>
						<form:errors path="taskName" cssClass="text-warning"/>
					</fieldset>
					
					<fieldset class="mb-3">
						<form:label path="description"> description </form:label>
						<form:input type="text" path="description" required="required"/>
						<form:errors path="description" cssClass="text-warning"/>
					</fieldset>
					
					<fieldset class="mb-3">
						<form:label path="date"> Completion Date </form:label>
						<form:input type="text" path="date" required="required"/>
						<form:errors path="date" cssClass="text-warning"/>
					</fieldset>
					<input type="submit" class="btn btn-success"/>
				</form:form>
			</div>
		</div>
		<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
		<script src="webjars/jquery/3.6.0/jquery.min.js"></script>
		<script src="webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
		<script type="text/javascript">
			$('#date').datepicker({
			    format: 'yyyy-mm-dd'
			});
		</script>
		<%@ include file="common/footer.jspf" %>	
	</body>
</html>
```



# 6. Adding Target Date Field to Todo Page

```
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap-datepicker</artifactId>
	<version>1.9.0</version>
</dependency>
```
```
<link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet">

<script src="webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
		<script type="text/javascript">
			$('#date').datepicker({
				format:'yyyy-mm-dd',
				startDate:'0d',
				autoClose:true,
				todayHighlight:true
			});
</script>
```

‚ú® - Inside application.properties:
        spring.mvc.format.date=yyyy-MM-dd

```
<div class="d-flex flex-column align-items-center m-3 form-group">
	<label for="date" class="m-2" style="width:90px">Date &#x2B07 </label>
	<form:input type="text" id="date" path="date" style="width:250px" cssClass="form-control" name="date" required="required"/>
	<div>
		<form:errors path="date" cssClass="text-warning"/>
	</div>
</div>
  
```







- --------------------------------------------‚≠êCHAPTER-X ENDS‚≠ê-----------------------------------------------








- ------------------------------------------< LET'S CONNECT & MORE >-------------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-XI ‚ú®-------------------------------------------------

# 1. 
# üí° What is session-attributes?

- Details stored across multiple requests, Unlike normal-requests.
- Details are stored on server.


```LoginController
@Controller
@SessionAttributes("name")
public class LoginController {...

public String tryLogin(@RequestParam String name, @RequestParam String password, ModelMap model) {
	if (authenticationService.authService(name, password)) {
		model.put("name", name);...
```
```ToDoController
@Controller
@SessionAttributes("name")
public class ToDoController {...

public String addToDo(@Valid @ModelAttribute("todo") ToDo todo,..){
	String username = (String)model.get("name");
	todoService.addToDo(username,..)
} üòä
```


# 2.
# üí° Add the "JSPF" 

```
- /WEB-INF/jsp/common/footer.jspf, header.jspf, navigation.jspf
- use <%@ include file="common/header.jspf"%>
```


```footer.jspf
<html>
	<head>
		<title> footer </title>
	</head>
	<body>
	
		<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
		<script src="webjars/jquery/3.6.0/jquery.min.js"></script>
		<script src="webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>				
	</body>
</html>
```
```header.jspf
<html>
	<head>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet" >
		<link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet" >
		
		<title>Manage Your Todos</title>		
	</head>
	<body>
	</body>
</html>
```

```navigation.jsp
<nav class="navbar navbar-expand-md navbar-light bg-light mb-3 p-3">

	<a class="navbar-brand m-1" href="">My-Practice</a>
	
	<div class="collapse navbar-collapse">
		<ul class="navbar-nav">
			<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
			<li class="nav-item"><a class="nav-link" href="/list-todo">To-Do</a></li>
		</ul>
	</div>
	
	<ul class="navbar-nav">
		<li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
	</ul>
	
</nav>
```






# 3. 
# üí° Delete The Entry ‚ùå‚ùå‚ùå

```ToDoController
	@RequestMapping("delete-todo")
	public String deleteToDo(@RequestParam int id) {
		todoService.deleteToDo(id);
		return "redirect:list-todo";
	}
```

```ToDoService
	public void deleteToDo(int id) {
		Predicate<? super ToDo> predicate = todo -> todo.getId() == id;
		todoList.removeIf(predicate);
	}
```

```ToDoList.jsp
<td><a href="/delete-todo?id=${todo.id}" class="btn btn-sm btn-danger">Delete</a></td>
```


# 4. Update the Entry üêí --> üë™

```ToDoController
	@RequestMapping(value="/update-todo", method=RequestMethod.GET)
	public String getUpdateToDo(@RequestParam int id, ModelMap model) {
		ToDo todo = todoService.getById(id);
		model.put("todo", todo);
		return "AddToDo";
	}
	@RequestMapping(value="/update-todo", method=RequestMethod.POST)
	public String updateToDo(@Valid @ModelAttribute("todo") ToDo todo, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return "AddToDo";
		}	

		String name = (String) model.get("name");
		todo.setUserName(name);

		todoService.updateToDo(todo);
		return "redirect:todo-list";
	}
```
```ToDoService
	public void updateToDo(ToDo todo) {
		deleteToDo(todo.getId());
		todoList.add(todo);
	}
```
```ToDoList.jsp
<td><a href="/update-todo?id=${todo.id}" class="btn btn-sm btn-info">Update</a></td>
```


# 5. Single EndPoint üòÆ:

```ToDoController
@RequestMapping(value = "add-todo", method = {RequestMethod.GET, RequestMethod.POST})
public String handleAddToDo(@Valid @ModelAttribute("todo") ToDo todo,
                            BindingResult result,
                            ModelMap model) {
    // If GET: create a blank ToDo object
    if (!result.isBindingFailure() && !result.hasErrors() && todo.getTaskName() == null) {
        // Likely a GET request
        todo = new ToDo("", "", "", LocalDate.now(), false);
        model.put("todo", todo);
        return "addToDo";
    }

    // If POST: check validation
    if (result.hasErrors()) {
        return "addToDo";
    }

    todoservice.addToDo(todo.getUsername(), todo.getTaskName(), todo.getDescription(), todo.getDate(), false);
    return "redirect:list-todo";
}

```








- --------------------------------------------‚≠êCHAPTER-XI ENDS‚≠ê-----------------------------------------------




- -----------------------------------------< LET'S AUTHENTICATEüíª >--------------------------------------------

- ---------------------------------------------‚ú®CHAPTER-XII ‚ú®------------------------------------------------


<<<<<<<<<<<<<<<<<<
-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*

- @SpringBootApplication annotation is _convenience annotation_ that combines:
	- 1). @Configuration		: Class can be used by "Spring IoC {Inversion of Control}_container_" as a source of "@Bean Bean" definitions.
	- 2). @EnableAutoConfiguration	: Automatically configure application based on the "dependencies" present on the _classpath_.
	- 3). @ComponentScan		: Allow Spring to discover & register "Beans" in the specified "PKG" & it's "Sub-PKG".

-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*

- @Configuration:
	- Classes annotated with @Configuration can define one or more @Bean methods. Each method annotated with @Bean returns an "Object" that
		should be registered as bean in spring application context.
	- Custom configuration
	- Spring treats `@Configuration classes` as "singletons", Meaning that the beans defined within them are created only once & shared across	
		the application. [ or The same instance will be returned each time the bean is requested]

- @Bean: Are central to IoC principal, Which allows spring to manage the lifecycle & dependencies of objects.
       Dependency Injection / Configuration flexibility [xml/java annotations/java configuration]
       Scope management:[allows you to define the scope of beans (singletons / prototype / request / session)]
       Aspect-Oriented Programming (AOP): Easily integrate with AOP features (logging / security / transactions)
       By-default all spring-beans are "singleton-beans" unless configured otherwise.
       By-default all "singleton-beans" are initialized "eagerly" at application-startup.
       Lazy-Initialization, Postpones the "creation-of-object" until it is first requested.

- @Scope("prototype") / "singleton" / "request" / "session" : To define a custom-scope for a Spring-Bean

-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*

- DISPATCHER-SERVLET:
	- Acts as the "Front-Controller" for Spring-Based Web Applications.
	- "Front-Controller": Any request is going to come into our website, The FC is going to stand in front and is going to accept all the requests
	   & makes a decision that who is the right controller to handle that request.



					     HttpSecurity[FilterChain --> HttpSecurity.build()]
	    					^
						|
						|
 [Header->JWT]					|
-Request---> [DispatcherServlet] -------> [SpringSecurity/SecurityFilterChain] --------> [Controller]

		          | [UsernamePassword|	             |[CSRFFilter]|
			  | Authentication   |	   	     |		  |
			  | Filter]          |   [JwtFilter] |		  |
				        (Chain of Responsibility)
						     |
						     |
						     v
				 JwtUtil / JwtHelper / JwtAuthentication ()

-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*-----------------------*

My JwtFilterChain will only process request with a header that has "Bearer token_value"

-> Each "_secured_spring_application_" maintains a Data-Structure [A HashMap<>()]

-> HashMap<>{	______________________
		| "userI" | "userII" |
	}	----------------------

-> Class that handles all these above things is called: 
	`SecurityContextHolder` ---------------> UsernamePasswordAuthenticationToken

-> trying to login ---creates `UsernamePasswordAuthenticationToken`---> update the HashMap 
				by calling `SecurityContextHolder.setAuthentication(Token)` 
*-----------------*-----------------*-----------------*-----------------*-----------------*-----------------

>>>>>>>>>>>>>>>>>


# 1. POM üéâüéâ:

```

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
```

# 2. Security ‚ûï:
```security
@Configuration
public class SpringSecurityConfiguration {
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests(auth -> auth.anyRequest().authenticated());
//		http.formLogin(withDefaults());
	    http.formLogin(form -> form
	            .defaultSuccessUrl("/todo-list", true)
	    );
		http.csrf(csrf -> csrf.disable());
		http.headers(headers -> headers.frameOptions(frameOptionsConfig -> frameOptionsConfig.disable()));	
		return http.build();
	}
	@Bean
	public InMemoryUserDetailsManager createUserDetailsManager() {
		Function<String, String> passwordEncoder = input -> passwordEncoder().encode(input);
		UserDetails userDetails = User.builder().passwordEncoder(passwordEncoder).username("harry").password("123").roles("USER","ADMIN")
			    .build();	
		return new InMemoryUserDetailsManager(userDetails);
	}	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();}}
```

```ToDoController
	private String getLoggedInUsername(ModelMap model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		return authentication.getName();}
```
*---------------------------------*---------------------------------*
```ToDoController
	@RequestMapping("/todo-list")
	public String getToDo(ModelMap model) {
		String username = getLoggedInUsername(model);
		List<ToDo> todos = todoService.getToDoByUsername(username);
		model.addAttribute("todos", todos);
		return "ToDoList";
	}
	@RequestMapping(value="/add-todo", method=RequestMethod.POST)
	public String addToDo(@Valid @ModelAttribute("todo") ToDo todo, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return "AddToDo"; // Just stay on the same page / url
		}
		String name = getLoggedInUsername(model);	
		todoService.addToDo(name, todo.getTaskName(), todo.getDescription(), todo.getDate(), todo.isDone());
		return "redirect:todo-list";}
```
*---------------------------------*---------------------------------*
```ToDoService
	public List<ToDo> getToDoByUsername(String username){
		Predicate<? super ToDo> predicate = todo -> todo.getUserName() != null && todo.getUserName().equalsIgnoreCase(username);
		return todoList.stream().filter(predicate).toList();
	}
```


- ---------------------------------------------‚≠êCHAPTER-XII ENDS‚≠ê----------------------------------------------


